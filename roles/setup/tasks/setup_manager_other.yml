---
- assert:
    that:
#      - docker_swarm_facts is defined
      - docker_swarm_join_token_manager is defined
      - docker_swarm_manager_ip is defined

- name: Install required pip modules
  pip:
    name:
      - jsondiff

- name: "Add iptable rule for port 2377"
  when: ansible_lsb.id is not defined or ansible_lsb.id != 'Raspbian'
  iptables:
    action: append
    chain: INPUT
    protocol: tcp
    destination_port: "2377"
    ctstate: ["NEW", "ESTABLISHED"]
    match: ["conntrack"]
    jump: "ACCEPT"
  changed_when: false

- name: "Add iptable rule for port 2377"
  when:
    - ansible_lsb.id is defined
    - ansible_lsb.id == 'Raspbian'
  shell: /sbin/iptables-legacy -t filter -A INPUT -p tcp -m conntrack -j ACCEPT --destination-port 2377 --ctstate NEW,ESTABLISHED

- name: "Add firewall rules (CentOS)"
  when: ansible_distribution == 'CentOS'
  block:
    - name: "Add rule"
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - 2376/tcp
        - 2377/tcp
        - 7946/tcp
        - 7946/udp
        - 4789/udp
      register: add_firewall_rule

    - name: Restart services
      when: add_firewall_rule.changed
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: "{{ item }}"
      loop:
        - firewalld
        - docker


- name: Inspect swarm
  docker_host_info:
  register: node_info

- name: Add nodes (Legacy)
  when: ansible_distribution == 'CentOS'
  ansible.builtin.shell: "docker swarm join --token {{ docker_swarm_join_token_manager }} {{ docker_swarm_manager_ip }}:2377"
  failed_when:
    - add_nodes_result_shell.stderr_lines | length > 0
    - not 'This node is already part of a swarm' in add_nodes_result_shell.stderr
  changed_when: add_nodes_result_shell.stderr_lines | length == 0
  register: add_nodes_result_shell
  retries: 10
  until: not add_nodes_result_shell.failed

- name: Add nodes
  when: ansible_distribution != 'CentOS'
  docker_swarm:
    state: join
    advertise_addr: "{{ ansible_default_ipv4.address }}"
    join_token: "{{ docker_swarm_join_token_manager }}"
#    join_token: "{{ docker_swarm_facts.JoinTokens.Manager }}"
    remote_addrs: [ '{{ docker_swarm_manager_ip }}:2377' ]
  register: add_nodes_result
  retries: 10
  until: not add_nodes_result.failed